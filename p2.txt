import tensorflow as tf 

(train_data, train_labels), (test_data, test_labels) = tf.keras.datasets.mnist.load_data() 

train_data = train_data.reshape((60000, 784)) / 255.0 
test_data = test_data.reshape((10000, 784)) / 255.0 

train_labels = tf.keras.utils.to_categorical(train_labels) 
test_labels = tf.keras.utils.to_categorical(test_labels) 

model = tf.keras.models.Sequential([ 
tf.keras.layers.Dense(128, activation='relu', input_shape=(784,),kernel_regularizer=tf.keras.regularizers.l2(0.01)),
tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01)),
tf.keras.layers.Dense(10, activation='softmax')])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
              loss='categorical_crossentropy',
metrics=['accuracy']) 

history = model.fit(train_data, train_labels, epochs=10, batch_size=128,validation_data=(test_data, test_labels))  

(train_data, train_labels), (test_data, test_labels) = tf.keras.datasets.mnist.load_data()

train_data = train_data.reshape((60000, 784)) / 255.0 
test_data = test_data.reshape((10000, 784)) / 255.0 
train_labels = tf.keras.utils.to_categorical(train_labels) 
test_labels = tf.keras.utils.to_categorical(test_labels) 


model = tf.keras.models.Sequential([
tf.keras.layers.Dense(128, activation='relu', input_shape=(784,),kernel_regularizer=tf.keras.regularizers.l2(0.01)),
tf.keras.layers.Dense(64, activation='relu', kernel_regularizer=tf.keras.regularizers.l2(0.01)), 
tf.keras.layers.Dense(10, activation='softmax') 
])

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
loss='categorical_crossentropy', 
metrics=['accuracy']) 

history = model.fit(train_data, train_labels, epochs=10, batch_size=128,validation_data=(test_data, test_labels))
